---
title: "3_pca"
format: html
editor: visual
---

```{r, message=FALSE, error=FALSE}

source(here::here("R/libraries.R"))
source(here::here("R/functions.R"))
load(file='data/results.rda')
load(file='data/metadata.rda')
load(file='data/df_long.rda')

knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)

```

PCA

```{r}
#Create PCA dataframe
df_wide <- df_long %>% 
    dplyr::select(c("sample", "protein","abundance", "intervention")) %>% 
    pivot_wider(names_from = protein, values_from = abundance) %>% 
    mutate_if(is.numeric, scale)


#Set seed for reproducible imputation
set.seed(99)

#Run PCA analysis
pc <- pca(df_wide, method="ppca", nPcs=2) 

#Merge analysis wit PCA data frame
df_wide <- merge(df_wide, scores(pc), by=0) %>% 
    dplyr::select(-"Row.names") 

#Visualize
ggplot(df_wide, aes(PC1, PC2, color=intervention, label=sample))+
    geom_point(size=6)+
    #geom_line(aes(group = id), alpha=0.2, color="black")+
    #stat_ellipse(lwd=1)+
    scale_color_manual(values=c("#003f5c", "#ffa600"),
                       labels = c("PBS",
                               "Terbutaline"))+
    #geom_text_repel(point.size=4, size=5, min.segment.length = Inf, force=0.3)+
    theme(
        plot.title = element_text(face = "bold", hjust = 0.5),
        panel.background = element_rect(fill = "transparent", colour = NA),
        plot.background = element_rect(fill = "transparent", colour = NA),
        panel.grid.minor=element_blank(),
        panel.grid.major = element_blank(),
        axis.line = element_line(colour = "black"),
        legend.text=element_text(size=15),
        legend.title = element_blank(),
        legend.key = element_blank(),
        axis.text.x = element_text(color="black", size=15),
        axis.text.y = element_text(color="black", size=15),
        axis.title=element_text(size=15)
        )+
    xlab(paste("Principal component 1 (", round(pc@R2[1] * 100, digits = 1), "% of variance)", sep=""))+
    ylab(paste("Principal component 2 (", round(pc@R2[2] * 100, digits = 1), "% of variance)", sep=""))

ggsave('data/figures/pca.pdf')
```

Loadings
```{r}
#Get loadings and calculate contributions
loadings <- loadings(pc) %>% 
    as.data.frame() %>% 
    mutate(pc1_contribution = (PC1^2)*100) %>% 
    mutate(pc2_contribution = (PC2^2)*100) %>% 
    rownames_to_column() %>% 
    dplyr::rename(protein=rowname)

write_xlsx(loadings, 'data/pca_loadings.xlsx')
```


```{r}
ggplot(loadings, aes(x=PC1, y=PC2, label=protein))+
    geom_point()
```

```{r}
loadings %>% 
    dplyr::select("protein", "pc1_contribution") %>% 
    arrange(desc(pc1_contribution)) %>% 
    slice_head(n = 20) %>% 
    ggplot(aes(x=reorder(protein, -pc1_contribution), y=pc1_contribution))+
    geom_col(color="black", fill="white")+
    theme(
        panel.background = element_rect(fill = "transparent", colour = NA),
        plot.background = element_rect(fill = "transparent", colour = NA),
        panel.grid.minor=element_blank(),
        panel.grid.major = element_blank(),
        axis.line = element_line(colour = "black"),
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, color="black", size=12),
        axis.text.y = element_text(color="black", size=12),
        legend.text=element_text(size=15),
        axis.title=element_text(size=15)
    )+
    xlab("Protein")+
    ylab("PC1 contribution (%)")
```
```{r}
loadings %>% 
    dplyr::select("protein", "pc2_contribution") %>% 
    arrange(desc(pc2_contribution)) %>% 
    slice_head(n = 20) %>% 
    ggplot(aes(x=reorder(protein, -pc2_contribution), y=pc2_contribution))+
    geom_col(color="black", fill="white")+
    theme(
        panel.background = element_rect(fill = "transparent", colour = NA),
        plot.background = element_rect(fill = "transparent", colour = NA),
        panel.grid.minor=element_blank(),
        panel.grid.major = element_blank(),
        axis.line = element_line(colour = "black"),
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, color="black", size=12),
        axis.text.y = element_text(color="black", size=12),
        legend.text=element_text(size=15),
        axis.title=element_text(size=15)
    )+
    xlab("Protein")+
    ylab("PC2 contribution (%)")
```

